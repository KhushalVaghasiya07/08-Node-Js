<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Elegant To-Do</title>
  <style>
    :root {
      --primary: #FF7E67;
      --primary-light: #FF9E8F;
      --primary-lighter: #FFD1C8;
      --primary-dark: #E86953;
      --accent: #FFB347;
      --text: #3A3A3A;
      --text-light: #7A7A7A;
      --background: #FFF9F7;
      --white: #FFFFFF;
      --border: #F0E6E3;
      --shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      padding: 0;
      font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
      background-color: var(--background);
      color: var(--text);
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      padding: 40px 20px;
      line-height: 1.6;
    }

    h1,
    h2 {
      color: var(--primary-dark);
      font-weight: 600;
      margin: 0;
    }

    h1 {
      font-size: 2.8rem;
      margin-bottom: 1.5rem;
      text-align: center;
      position: relative;
      display: inline-block;
      animation: fadeInDown 0.6s ease-out;
    }

    h1 span {
      color: var(--primary);
    }

    h2 {
      font-size: 1.5rem;
      margin-bottom: 1.8rem;
    }

    form {
      background-color: var(--white);
      padding: 2.2rem;
      border-radius: 16px;
      box-shadow: var(--shadow);
      width: 100%;
      max-width: 500px;
      margin-bottom: 3rem;
      border: 1px solid var(--border);
      transition: var(--transition);
      animation: fadeIn 0.8s ease-out;
    }

    form:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    }

    label {
      font-weight: 500;
      display: block;
      margin-bottom: 0.6rem;
      color: var(--text);
      font-size: 0.95rem;
    }

    input[type="text"],
    input[type="datetime-local"],
    textarea,
    select {
      width: 100%;
      padding: 0.85rem 1.2rem;
      border: 1px solid var(--border);
      border-radius: 10px;
      margin-bottom: 1.5rem;
      font-family: inherit;
      font-size: 1rem;
      transition: var(--transition);
      background-color: var(--white);
    }

    input[type="text"]:focus,
    input[type="datetime-local"]:focus,
    textarea:focus,
    select:focus {
      outline: none;
      border-color: var(--primary-light);
      box-shadow: 0 0 0 3px rgba(255, 126, 103, 0.15);
    }

    textarea {
      min-height: 120px;
      resize: vertical;
    }

    button {
      width: 100%;
      padding: 1rem;
      border: none;
      border-radius: 10px;
      background-color: var(--primary);
      color: white;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      margin-top: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    button:hover {
      background-color: var(--primary-dark);
      transform: translateY(-2px);
    }

    button:active {
      transform: translateY(0);
    }

    ::placeholder {
      color: var(--text-light);
      opacity: 1;
    }

    .task-card {
      background-color: var(--white);
      padding: 1.8rem;
      border-radius: 14px;
      box-shadow: var(--shadow);
      width: 100%;
      max-width: 700px;
      margin-bottom: 1.8rem;
      transition: var(--transition);
      position: relative;
      overflow: hidden;
      animation: fadeInUp 0.5s ease-out;
    }

    .task-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 35px rgba(0, 0, 0, 0.1);
    }

    .task-card p {
      margin: 0.6rem 0;
      color: var(--text);
    }

    .task-card strong {
      color: var(--text);
      font-weight: 500;
    }

    .task-card-actions {
      display: flex;
      gap: 0.8rem;
      margin-top: 1.5rem;
    }

    .action-btn {
      text-decoration: none;
      padding: 0.6rem 1.2rem;
      border-radius: 8px;
      font-size: 0.9rem;
      font-weight: 500;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }

    .edit-btn {
      background-color: var(--primary-light);
      color: white;
    }

    .delete-btn {
      background-color: #FF6B6B;
      color: white;
    }

    .edit-btn:hover {
      background-color: var(--primary);
      transform: translateY(-2px);
    }

    .delete-btn:hover {
      background-color: #FF5252;
      transform: translateY(-2px);
    }

    .empty-state {
      text-align: center;
      color: var(--text-light);
      margin: 3rem 0;
      font-size: 1.1rem;
      animation: fadeIn 1s ease-out;
    }

    .empty-state svg {
      width: 100px;
      height: 100px;
      margin-bottom: 1.5rem;
      opacity: 0.8;
    }

    .priority-tag {
      padding: 0.3rem 0.9rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-left: 0.8rem;
    }

    .priority-high {
      background-color: #FFEEEE;
      color: #FF5252;
    }

    .priority-medium {
      background-color: #FFF4E5;
      color: #FFA726;
    }

    .priority-low {
      background-color: #E8F5E9;
      color: #66BB6A;
    }

    .task-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.8rem;
    }

    .task-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary-dark);
      margin: 0;
      display: flex;
      align-items: center;
    }

    .due-date {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--text-light);
      font-size: 0.9rem;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes fadeInDown {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .checkbox {
      position: relative;
      width: 20px;
      height: 20px;
      margin-right: 1rem;
      cursor: pointer;
      appearance: none;
      -webkit-appearance: none;
      border: 2px solid var(--primary-light);
      border-radius: 5px;
      transition: var(--transition);
    }

    .checkbox:checked {
      background-color: var(--primary);
      border-color: var(--primary);
    }

    .checkbox:checked::after {
      content: '✓';
      position: absolute;
      color: white;
      font-size: 0.8rem;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .completed {
      opacity: 0.7;
      position: relative;
    }

    .completed::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      width: 100%;
      height: 1px;
      background-color: var(--primary);
      transform: translateY(-50%);
    }

    @media (max-width: 600px) {
      body {
        padding: 30px 15px;
      }

      h1 {
        font-size: 2.2rem;
      }

      form {
        padding: 1.8rem;
      }

      .task-card {
        padding: 1.5rem;
      }
    }
  </style>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
</head>

<body>
  <h1>Elegant<span>Tasks</span></h1>

  <% if (editingTask) { %>
    <form action="/update/<%= editingTask.id %>" method="POST">
      <h2>✏️ Edit Task</h2>
      <label for="task">Task Name</label>
      <input type="text" name="task" id="task" value="<%= editingTask.task %>" required
        placeholder="What needs to be done?">

      <label for="description">Description</label>
      <textarea name="description" id="description" required
        placeholder="Add details about this task"><%= editingTask.description %></textarea>

      <label for="dueDate">Due Date</label>
      <input type="datetime-local" name="dueDate" id="dueDate" value="<%= editingTask.dueDate %>" required>

      <label for="priority">Priority</label>
      <select name="priority" id="priority" required>
        <option value="High" <%=editingTask.priority==='High' ? 'selected' : '' %>>High Priority</option>
        <option value="Medium" <%=editingTask.priority==='Medium' ? 'selected' : '' %>>Medium Priority</option>
        <option value="Low" <%=editingTask.priority==='Low' ? 'selected' : '' %>>Low Priority</option>
      </select>

      <button type="submit">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
          <polyline points="17 21 17 13 7 13 7 21"></polyline>
          <polyline points="7 3 7 8 15 8"></polyline>
        </svg>
        Update Task
      </button>
    </form>
    <% } else { %>
      <form action="/add_task" method="POST">
        <h2>✨ Add New Task</h2>
        <label for="task">Task Name</label>
        <input type="text" name="task" id="task" required placeholder="What needs to be done?">

        <label for="description">Description</label>
        <textarea name="description" id="description" required placeholder="Add details about this task"></textarea>

        <label for="dueDate">Due Date</label>
        <input type="datetime-local" name="dueDate" id="dueDate" required>

        <label for="priority">Priority</label>
        <select name="priority" id="priority" required>
          <option value="" disabled selected>Select priority</option>
          <option value="High">High Priority</option>
          <option value="Medium">Medium Priority</option>
          <option value="Low">Low Priority</option>
        </select>

        <button type="submit">
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          Add Task
        </button>
      </form>
      <% } %>

        <h2>📋 Your Tasks</h2>

        <% if (todoList.length===0) { %>
          <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1"
                d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <p>Your task list is empty. Time to add something amazing!</p>
          </div>
          <% } %>

            <% todoList.forEach(item=> { %>
              <div class="task-card">
                <div class="task-header">
                  <h3 class="task-title">
                    <input type="checkbox" class="checkbox">
                    <%= item.task %>
                  </h3>
                  <span class="priority-tag priority-<%= item.priority.toLowerCase() %>">
                    <%= item.priority %>
                  </span>
                </div>

                <p><strong>Description:</strong>
                  <%= item.description %>
                </p>

                <div class="due-date">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                  </svg>
                  <%= new Date(item.dueDate).toLocaleString() %>
                </div>

                <div class="task-card-actions">
                  <a href="/edit/<%= item.id %>" class="action-btn edit-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7"></path>
                      <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                    </svg>
                    Edit
                  </a>
                  <a href="/delete/<%= item.id %>" class="action-btn delete-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="3 6 5 6 21 6"></polyline>
                      <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"></path>
                      <line x1="10" y1="11" x2="10" y2="17"></line>
                      <line x1="14" y1="11" x2="14" y2="17"></line>
                    </svg>
                    Delete
                  </a>
                </div>
              </div>
              <% }) %>

                <script>
                  document.addEventListener('DOMContentLoaded', function () {
                    // Checkbox functionality
                    const checkboxes = document.querySelectorAll('.checkbox');
                    checkboxes.forEach(checkbox => {
                      checkbox.addEventListener('change', function () {
                        const taskTitle = this.nextElementSibling;
                        if (this.checked) {
                          taskTitle.classList.add('completed');
                        } else {
                          taskTitle.classList.remove('completed');
                        }
                      });
                    });

                    // Animation for form elements
                    const inputs = document.querySelectorAll('input, textarea, select');
                    inputs.forEach(input => {
                      input.addEventListener('focus', function () {
                        this.parentElement.style.transform = 'translateY(-2px)';
                      });
                      input.addEventListener('blur', function () {
                        this.parentElement.style.transform = '';
                      });
                    });
                  });
                </script>
</body>

</html>